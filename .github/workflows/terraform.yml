name: "Terraform"

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-18.04
    env: 
      AWS_EC2_METADATA_DISABLED: true
      AWS_DEFAULT_REGION: ap-southeast-1
    steps:
      - name: Retrieve secret from Vault
        uses: hashicorp/vault-action@v2.4.0
        id: secrets
        with:
          url: https://jane-vault.vault.9c357452-e886-44d5-9426-7eee3109c75e.aws.hashicorp.cloud:8200
          token: ${{ secrets.VAULT_TOKEN }}
          namespace: admin
          secrets: |
            kv/data/aws AWS_ACCESS_KEY_ID | AWS_ACCESS_KEY_ID ;
            kv/data/aws AWS_SECRET_ACCESS_KEY | AWS_SECRET_ACCESS_KEY ;
            kv/data/aws AWS_SESSION_EXPIRATION | AWS_SESSION_EXPIRATION;
            kv/data/aws AWS_SESSION_TOKEN | AWS_SESSION_TOKEN

      - name: Echo env
        run: echo $AWS_ACCESS_KEY_ID
        
      - name: echo session expiration
        run: echo '${{ steps.secrets.outputs.AWS_SESSION_TOKEN }}'
      
      - name: Checkout
        uses: actions/checkout@v2
        
      - name: Write AWS creds file
        run: echo "[default]" >> ~/.aws/credentials && echo "aws_access_key_id = $AWS_ACCESS_KEY_ID" >> ~/.aws/credentials && echo "aws_secret_access_key = $AWS_SECRET_ACCESS_KEY" >> ~/.aws/credentials && echo "aws_session_token = $AWS_SESSION_TOKEN" >> ~/.aws/credentials

      - name: echo creds file
        run: cat ~/.aws/credentials

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          # terraform_version: 0.13.0:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init
      
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color
        continue-on-error: true

      - uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
            #### Terraform Validation 🤖\`${{ steps.validate.outcome }}\`
            #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve
